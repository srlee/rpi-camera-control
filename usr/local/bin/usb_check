#!/bin/bash
#
#  Raspberry Pi Camera Control Software
#  Copyright (C) 2014 Cansel Software Limited
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#

restart_services(){
    # restart services so they are aware of new device
    service apache2 restart
    /etc/init.d/cansel-camera stop
    /etc/init.d/cansel-camera start
}

CONFIG_FILE=/etc/cansel/mjpg-streamer.cfg
CONFIG_FILE_SECURED=/tmp/mjpg-streamer.cfg
CONFIG_FILE_BAK=/etc/cansel/mjpg-streamer.cfg.bak

# check if the file contains something we don't want
if egrep -q -v '^#|^[^ ]*=[^;]*' "$CONFIG_FILE"; then
  echo "Config file is unclean, cleaning it..." >&2
  # filter the original to a new file
  egrep '^#|^[^ ]*=[^;&]*'  "$CONFIG_FILE" > "$CONFIG_FILE_SECURED"
  CONFIG_FILE="$CONFIG_FILE_SECURED"
fi

source "$CONFIG_FILE"

#check for mounted or unmounted usb drive

DEVICE=$(mount | grep '/dev/sda1' | awk '{print $3}')

#is anything in first port if not check second
if [ -z "$DEVICE" ]; then
	DEVICE=$(mount | grep '/dev/sdb1' | awk '{print $3}')
fi

if [ -z "$DEVICE" ]; then
    if [ "$BASE_PATH" != "/var/www" ]; then
        DEVICE=/var/www
        #replace device with local dir
        cp $CONFIG_FILE $CONFIG_FILE_BAK
        sed "s,BASE_PATH=.*,BASE_PATH=$DEVICE," $CONFIG_FILE_BAK > $CONFIG_FILE
		sudo perl -pi -e 's/alias \/pictures \/media\/usb0\/pictures/#alias \/pictures \/media\/usb0\/pictures/' /etc/apache2/sites-available/default 
		sudo perl -pi -e 's/alias \/pictures \/media\/usb0\/pictures/#alias \/pictures \/media\/usb0\/pictures/' /etc/apache2/sites-available/default-ssl 
		sudo perl -pi -e 's/alias \/movies \/media\/usb0\/movies/#alias \/movies \/media\/usb0\/movies/' /etc/apache2/sites-available/default 
		sudo perl -pi -e 's/alias \/movies \/media\/usb0\/movies/#alias \/movies \/media\/usb0\/movies/' /etc/apache2/sites-available/default-ssl 
		restart_services;
    fi
else
    #replace local with usb device and move content
    cp $CONFIG_FILE $CONFIG_FILE_BAK
    sed "s,BASE_PATH=.*,BASE_PATH=$DEVICE," $CONFIG_FILE_BAK > $CONFIG_FILE
    # if replacing local let's copy everything to usb device

    if [ "$BASE_PATH" != "$DEVICE" ]; then
		if [ ! -d "$DEVICE/$SAVEDIR" ]; then
    	    echo $DEVICE/$SAVEDIR
    		mkdir $DEVICE/$SAVEDIR  
    	fi
        # let's let the web interface know we are moving stuff
        touch /tmp/usb_move 
        # rsync in place of copy in case you have used usb before 
 		rsync -av --delete /var/www/$SAVEDIR/* /$DEVICE/$SAVEDIR
        # restart services so they are aware of new device
		sudo perl -pi -e 's/#alias \/pictures \/media\/usb0\/pictures/alias \/pictures \/media\/usb0\/pictures/' /etc/apache2/sites-available/default 			sudo perl -pi -e 's/#alias \/pictures \/media\/usb0\/pictures/alias \/pictures \/media\/usb0\/pictures/' /etc/apache2/sites-available/default-ssl 
		sudo perl -pi -e 's/#alias \/movies \/media\/usb0\/movies/alias \/movies \/media\/usb0\/movies/' /etc/apache2/sites-available/default 	
        sudo perl -pi -e 's/#alias \/movies \/media\/usb0\/movies/alias \/movies \/media\/usb0\/movies/' /etc/apache2/sites-available/default-ssl 
		restart_services;
	    rm -rf /tmp/usb_move	        
	fi
fi


